def maximum (*cisla):
  """Counts max"""
  m=cisla[0]
  for n in cisla[1:]:
    if n>m:
      m=n
  return m


def example (n, list1, list2):
  """Mutable objects"""
  list1.append('Black')
  x=list2
  x.append("we will see this in list2")
  x=[3,2,1]
  n+=1


def example ():
  """Namespace"""
  a=1
  b=2

a=10
b=20
example()
print(a,b)


myfile=open ("/etc/passwd","r")
count=0
while row=myfile.readline() != "":
  count+=1
  print(row)

myfile.close()



import string
myfile=open ("/etc/passwd","r")
for a in myfile:
  print(a.rstrip())

myfile.close()


import pickle
a="This is my text"
b=[1,2,4,5,6]
myfile=open("state","wb")
pickle.dump(a,myfile)
pickle.dump(b,myfile)
myfile.close()

import pickle
myfile=open("state","rb")
y=pickle.load(myfile)
x=pickle.load(myfile)
myfile.close()
print(y)
print(x)


import shelve
adresar=shelve.open("/tmp/adresy")
adresar["policie"]=["Statni policie","158"]
adresar["hasici"]=["Hasicsky sbor","150"]
adresar.close()


import shelve
adresar=shelve.open("/tmp/adresy")
print(adresar["policie"])
print(adresar["hasici"])
adresar.close()

class Person:
  def printall(self):
    print ("Name : %s, age : %d" % (self.name,self.age))


class Person:
  def __init__(self,name='',age=0):
    self.name=name
    self.age=age
  def printall(self):
    print ("Name : %s, age : %d" % (self.name,self.age))
  def __str__(self):
    return(self.name)
  def __repr__(abc):
    return ''
  def __gt__(self,other):
    if (self.age>other.age):
      return True
    return False
  def __eq__(a,b):
    if type(b)==int:
      return a.age==b
    if a.age==b.age:
      return True
    return False

pepa=Person("Josef",20)
pepa.printall()


class Person:
  Person_id=1
  def __init__(self,name,age):
    self.name=name
    self.age=age
    self.cid=Person.Person_id
    Person.Person_id+=1
  @classmethod
  def resetPerson(cls):
    cls.Person_id=1
  def printall(self):
    print ("Name : %s, age : %d, id : %d" % (self.name,self.age,self.cid))
  @staticmethod
  def plus(a,b):
    return a+b

pepa1=Person("Josef",20)
pepa2=Person("Josef",20)
pepa3=Person("Josef",20)
pepa1.resetPerson()
lojza=Person("Alois",19)
pepa1.printall()
lojza.printall()


class trida:
  def __init__(self):
    self.x=1
    self.__y=2
  def printall(self):
    print(self.x)
    print(self.__y)


class myint(int):
  def __add__(self,other):
    #return int(self)+int(other)
    return myint(int(self)+int(other))

var=myint(10)
var+'20'

class firstn(object):
  def __init__(self, n):
    self.n = n
    self.num = 0
  def __iter__(self):
    return self
  def __next__(self):
    if self.num < self.n:
      cur, self.num = self.num, self.num+1
      return cur
    else:
      raise StopIteration()

def firstn(n):
  num = 0
  while num < n:
    yield num
    num += 1


import cx_Oracle #sqlite3
#conn=sqlite3.connect("gopas.sqlite")
conn=cx_Oracle.connect("gopas/gopas@10.2.21.34:orcl")
cursor=conn.cursor()
cursor.execute("select * from phones")
for record in cursor.fetchall():
  print("Name : %s, phone number : %s" %(record[0],record[1]))

conn.close()



